---

- name: Add the required apt packages
  apt:
    pkg:
      - apt-transport-https
      - ca-certificates
      - curl
      - software-properties-common
      - aptitude
    state: present
    # Make sure to run apt-get update first. For example, when running
    # inside a Docker container, the cache will be empty at first.
    update_cache: true

- name: Install the OpenShift pip package (required by the k8s module)
  pip:
    name: openshift

- name: Loading the br_netfilter kernel module
  modprobe:
    name: br_netfilter
    state: present
  when: load_kernel_modules

- name: Update kernel settings
  sysctl:
    name: net.bridge.bridge-nf-call-iptables
    value: 1
    sysctl_set: true
    state: present
    reload: true
  # This fails when running inside Docker containers. The molecule tests
  # use containers, so allow that failure.
  ignore_errors: true

- name: Add Docker apt key
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present

- name: Add Docker apt repository
  apt_repository:
    repo: deb https://download.docker.com/linux/ubuntu bionic stable
    state: present
  register: apt_docker

- name: Add Kubernetes apt key
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present

- name: Add Kubernetes apt repository
  apt_repository:
    repo: deb http://apt.kubernetes.io/ kubernetes-xenial main
    state: present
  register: apt_kubernetes

- name: Update apt cache
  apt:
    update_cache: true
  when: apt_docker.changed or apt_kubernetes.changed

- name: Install Docker
  apt:
    pkg: docker-ce={{ docker_version }}
    state: present
  register: docker_install

- name: Create /etc/docker directory
  file:
    path: /etc/docker
    state: directory
    owner: root
    group: root
    mode: 0700

- name: Configure Docker cgroupdriver
  copy:
    content: |
            {
              "exec-opts": ["native.cgroupdriver=cgroupfs"]
            }
    dest: /etc/docker/daemon.json
  register: docker_cgroupdriver

- name: Restart docker
  service:
    name: docker
    state: restarted
  when: docker_cgroupdriver.changed

- name: Install Kubernetes kubelet kubeadm kubectl
  apt:
    pkg:
      - kubelet={{ kubernetes_version }}-00
      - kubeadm={{ kubernetes_version }}-00
      - kubectl={{ kubernetes_version }}-00
    state: present

- name: Load the required kernel modules
  modprobe: name={{ item }} state=present
  with_items:
    - ip_vs
    - ip_vs_rr
    - ip_vs_wrr
    - ip_vs_sh
  when: load_kernel_modules

- name: Pull the Kubernetes images
  shell: kubeadm config images pull --kubernetes-version v{{ kubernetes_version }}
  when: preseed_docker_images
